# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from new_team import Ui_NewTeam
from open_team import Ui_OpenTeam
from evaluate_team import Ui_EvalTeam
from team_score import Ui_TeamScore
from delete_team import Ui_DeleteTeam

from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import sys

import sqlite3
conn = sqlite3.connect('cricket.db')
cur = conn.cursor()


class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()
        self.totalPlayers = {}
        self.totalPlayers = set(self.totalPlayers)
        self.batsmen = {}
        self.batsmen = set(self.batsmen)
        self.bowler = {}
        self.bowler = set(self.bowler)
        self.wkeeper = {}
        self.wkeeper = set(self.wkeeper)
        self.allrounder = {}
        self.allrounder = set(self.allrounder)
        self.totalPlayers = self.batsmen | self.bowler | self.allrounder | self.wkeeper
        self.scoreAvailable = 1100
        self.scoreUsed = 0

    def team_Name(self):
        if self.uiNew.editNewTeam.text() == "":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning!!!")
            msg.setText("Can not leave the field Blank.")
            msg.exec_()
        else:
            self.teamname = self.uiNew.editNewTeam.text()
            self.labelTeamName.setText(self.teamname)
            self.windowNew.hide()
            self.labelBat.setText("0")
            self.labelBow.setText("0")
            self.labelAr.setText("0")
            self.labelWk.setText("0")
            self.labelPointsAvailable.setText("1000")
            self.labelPointsUsed.setText("0")
            if self.teamname != "":
                self.radioAr.setEnabled(1)
                self.radioBat.setEnabled(1)
                self.radioBow.setEnabled(1)
                self.radioWk.setEnabled(1)

    def batters(self):
        self.listAvailable.clear()
        bat = {}
        bat = set(bat)
        sql = "select Player from stats where Category = 'BAT';"
        try:
            cur.execute(sql)
            result = cur.fetchall()
            if result:
                for i in result:
                    bat.add(str(i[0]))
            bat = bat-self.batsmen
            for t in bat:
                self.listAvailable.addItem(t)
        except:
            print("Error in adding players to list")

    def bowlers(self):
        self.listAvailable.clear()
        bow = {}
        bow = set(bow)
        sql = "select Player from stats where Category = 'BOWL';"
        try:
            cur.execute(sql)
            result = cur.fetchall()
            if result:
                for i in result:
                    bow.add(str(i[0]))
            bow = bow-self.bowler
            for t in bow:
                self.listAvailable.addItem(t)
        except:
            print("Error in adding players to list")

    def allrounders(self):
        self.listAvailable.clear()
        ar = {}
        ar = set(ar)
        sql = "select Player from stats where Category = 'AR';"
        try:
            cur.execute(sql)
            result = cur.fetchall()
            if result:
                for i in result:
                    ar.add(str(i[0]))
            ar = ar-self.allrounder
            for t in ar:
                self.listAvailable.addItem(t)
        except:
            print("Error in adding players to list")

    def wicketkeepers(self):
        self.listAvailable.clear()
        wk = {}
        wk = set(wk)
        sql = "select Player from stats where Category = 'WK';"
        try:
            cur.execute(sql)
            result = cur.fetchall()
            if result:
                for i in result:
                    wk.add(str(i[0]))
            wk = wk-self.wkeeper
            for t in wk:
                self.listAvailable.addItem(t)
        except:
            print("Error in adding players to list")

    def teamPoints(self):
        for i in self.totalPlayers:
            try:
                cur.execute("select Value from stats where Player='"+i+"';")
                result = cur.fetchone()
                self.scoreUsed += result[0]
            except:
                print("Error in teamPoints() method.")
        self.scoreAvailable -= self.scoreUsed


    
    def update(self):
        self.labelBat.setText(str(len(self.batsmen)))
        self.labelBow.setText(str(len(self.bowler)))
        self.labelAr.setText(str(len(self.allrounder)))
        self.labelWk.setText(str(len(self.wkeeper)))

    


    def add_used_points(self, element):
        '''flag = True
        for i in range(self.listUsed.count()):
            # print(element.text())
            # print(self.listUsed.item(i).text())
            if str(element.text()) == str(self.listUsed.item(i).text()):
                flag = False'''

        if (self.scoreAvailable >= 0) and (self.scoreUsed <= 1100):
            self.totalPlayers = self.batsmen | self.bowler | self.allrounder | self.wkeeper
            if len(self.totalPlayers) < 11:
                try:
                    sql = "select Category,Value from stats where Player= '"+element.text()+"';"
                    cur.execute(sql)
                    result = cur.fetchone()
                    temp = self.scoreAvailable-int(result[1])
                    if temp > 0:
                        if result[0] == 'BAT':
                            self.batsmen.add(element.text())
                        elif result[0] == 'BOWL':
                            self.bowler.add(element.text())
                        elif result[0] == 'AR':
                            self.allrounder.add(element.text())
                        elif result[0] == 'WK':
                            if len(self.wkeeper) < 1:
                                self.wkeeper.add(element.text())
                            else:
                                msg = QMessageBox()
                                msg.setIcon(QMessageBox.Warning)
                                msg.setWindowTitle("Warning!!!")
                                msg.setText(
                                    "Can not more than one Wicket Keeper.")
                                msg.exec_()
                        self.totalPlayers = self.batsmen | self.bowler | self.allrounder | self.wkeeper
                        self.listUsed.clear()
                        self.listAvailable.takeItem(
                            self.listAvailable.row(element))
                        self.update()
                        for i in self.totalPlayers:
                            self.listUsed.addItem(i)
                        self.scoreAvailable -= result[1]
                        self.scoreUsed += result[1]
                        self.labelPointsAvailable.setText(
                            str(self.scoreAvailable))
                        self.labelPointsUsed.setText(str(self.scoreUsed))
                    else:
                        print("Available point can't be negative.")
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Warning)
                        msg.setWindowTitle("Warning!!!")
                        msg.setText(
                            "Create a team having less than or equal to 1100 points.")
                        msg.exec_()
                except:
                    print("Error in query of database in add_used_points() function.")
            else:
                print("Can't have more than 11 players")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Warning!!!")
                msg.setText("Can not have more than 11 players.")
                msg.exec_()
        else:
            print("Available point can't be negative.")
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning!!!")
            msg.setText(
                "Select a team having less than or equal to 1100 points.")
            msg.exec_()
        '''else:
            print("The player is alredy selected")
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning!!!")
            msg.setText("The player is alredy selected.")
            msg.exec_()'''

    def add_available_points(self, element):
        try:
            sql = "select Category,Value from stats where Player='" + element.text()+"';"
            cur.execute(sql)
            result = cur.fetchone()
            self.scoreAvailable += result[1]
            self.scoreUsed -= result[1]
            if result[0] == 'BAT':
                self.batsmen.remove(element.text())
            elif result[0] == 'BOWL':
                self.bowler.remove(element.text())
            elif result[0] == 'AR':
                self.allrounder.remove(element.text())
            elif result[0] == 'WK':
                self.wkeeper.remove(element.text())
            self.totalPlayers = self.batsmen | self.bowler | self.allrounder | self.wkeeper
            self.update()
            self.listUsed.takeItem(self.listUsed.row(element))
            self.listAvailable.addItem(element.text())
            self.labelPointsUsed.setText(str(self.scoreUsed))
            self.labelPointsAvailable.setText(str(self.scoreAvailable))
        except:
            print("Error in add_available_points() function.")

    def teamScore(self):
        self.windowScore = QtWidgets.QDialog()
        self.uiScore = Ui_TeamScore()
        self.uiScore.setupUi(self.windowScore)
        self.windowScore.show()


    def newTeam(self):
        self.windowNew = QtWidgets.QDialog()
        self.uiNew = Ui_NewTeam()
        self.uiNew.setupUi(self.windowNew)
        self.windowNew.show()
        self.uiNew.btnNewTeam.clicked.connect(self.team_Name)


    def openTeam(self):
        self.__init__()
        self.windowOpen = QtWidgets.QDialog()
        self.uiOpen = Ui_OpenTeam()
        self.uiOpen.setupUi(self.windowOpen)
        self.uiOpen.openteam()
        self.windowOpen.show()
        self.uiOpen.btnOpenTeam.clicked.connect(self.open)

    def open(self):
        self.listUsed.clear()
        self.teamname = self.uiOpen.comboOpenTeam.currentText().replace(
            "'", "!")  # replacing ' with +
        print(self.teamname)
        self.labelTeamName.setText(self.teamname)
        try:
            cur.execute(
                "select Players,Value from teams where Name='"+self.teamname+"';")
            result = cur.fetchall()
            conn.commit()
            for player in result:
                self.scoreUsed += int(str(player[1]))
                self.listUsed.addItem(player[0])
                cur.execute(
                    "select Category from stats where Player='"+player[0]+"';")
                r = cur.fetchone()
                if r[0] == 'BAT':
                    self.batsmen.add(player[0])
                elif r[0] == 'BOWL':
                    self.bowler.add(player[0])
                elif r[0] == 'AR':
                    self.allrounder.add(player[0])
                elif r[0] == 'WK':
                    self.wkeeper.add(player[0])
            self.labelBat.setText(str(len(self.batsmen)))
            self.labelBow.setText(str(len(self.bowler)))
            self.labelAr.setText(str(len(self.allrounder)))
            self.labelWk.setText(str(len(self.wkeeper)))
            self.scoreAvailable -= self.scoreUsed
            self.labelPointsUsed.setText(str(self.scoreUsed))
            self.labelPointsAvailable.setText(str(self.scoreAvailable))
            self.windowOpen.hide()
            self.radioAr.setEnabled(1)
            self.radioBat.setEnabled(1)
            self.radioBow.setEnabled(1)
            self.radioWk.setEnabled(1)
        except:
            print("Error in open() method.")


    def save_team(self):
        try:
            name = str(self.labelTeamName.text()).replace("'", "!")
            cur.execute("select Name from teams;")
            rs = cur.fetchall()
            conn.commit()
            for j in rs:
                if name == str(j[0]):
                    cur.execute("delete from teams where Name = '"+name+"';")
            if name != 'Display Here' and len(self.totalPlayers) == 11:
                for i in range(self.listUsed.count()):
                    player = self.listUsed.item(i).text()
                    cur.execute(
                        "select Value from stats where Player='"+player+"';")
                    conn.commit()
                    result = cur.fetchone()
                    value = str(result[0])
                    cur.execute(
                        "insert into teams(Name,Players,Value) values(?,?,?);", (name, player, value))
                    conn.commit()
                    # Display(Name + Player + Value)
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("")
                msg.setText("Team Saved Successfully.")
                msg.exec()
            else:
                print("No Team to Save")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Warning!!!")
                msg.setText("Create a Team of 11 Players.")
                msg.exec()
        except:
            print("Error in save_team() method.")


    def evaluateTeam(self):
        self.windowEval = QtWidgets.QDialog()
        self.uiEval = Ui_EvalTeam()
        self.uiEval.setupUi(self.windowEval)
        self.uiEval.evaladd()
        self.windowEval.show()

    def del_team(self):
        self.__init__()
        self.windowOpen = QtWidgets.QDialog()
        self.uiDelete = Ui_DeleteTeam()
        self.uiDelete.setupUi(self.windowOpen)
        self.uiDelete.del_team()
        self.windowOpen.show()
        self.uiDelete.del_btn.clicked.connect(self.delete)

    def delete(self):
        self.listUsed.clear()
        self.teamname = self.uiDelete.del_combobox.currentText().replace(
            "'", "!")  # replacing ' with +
        print(self.teamname)
        self.labelTeamName.setText(self.teamname)
        try:
            delete = "Delete from teams where name='"+self.teamname+"';"
            cur.execute(delete)
            conn.commit()
            
        except:
            print("Error in delete() method.")

            
    def quit(self):
        sys.exit(app.exec_())
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(644, 588)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 621, 80))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame.setStyleSheet("background-color:#b7ebcd")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 10, 95, 16))
        
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(10, 40, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        
        self.labelBat = QtWidgets.QLabel(self.frame)
        self.labelBat.setGeometry(QtCore.QRect(110, 40, 31, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelBat.setFont(font)
        self.labelBat.setStyleSheet("color: #0d6ba6")
        self.labelBat.setObjectName("labelBat")
        
        self.labelBow = QtWidgets.QLabel(self.frame)
        self.labelBow.setGeometry(QtCore.QRect(240, 40, 31, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelBow.setFont(font)
        self.labelBow.setStyleSheet("color: #0d6ba6")
        self.labelBow.setObjectName("labelBow")
        
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(140, 40, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        
        self.labelAr = QtWidgets.QLabel(self.frame)
        self.labelAr.setGeometry(QtCore.QRect(390, 40, 16, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelAr.setFont(font)
        self.labelAr.setStyleSheet("color: #0d6ba6")
        self.labelAr.setObjectName("labelAr")
        
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(270, 40, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        
        self.labelWk = QtWidgets.QLabel(self.frame)
        self.labelWk.setGeometry(QtCore.QRect(560, 40, 31, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelWk.setFont(font)
        self.labelWk.setStyleSheet("color: #0d6ba6")
        self.labelWk.setObjectName("labelWk")
        
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(430, 40, 131, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 100, 621, 51))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.frame_2.setStyleSheet("background-color:#c7ebe5")
        
        self.labelPointsAvailable = QtWidgets.QLabel(self.frame_2)
        self.labelPointsAvailable.setGeometry(QtCore.QRect(140, 20, 41, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelPointsAvailable.setFont(font)
        self.labelPointsAvailable.setStyleSheet("color: #0d6ba6")
        self.labelPointsAvailable.setObjectName("labelPointsAvailable")
        
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setGeometry(QtCore.QRect(10, 20, 105, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setGeometry(QtCore.QRect(455, 20, 80, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        
        self.labelPointsUsed = QtWidgets.QLabel(self.frame_2)
        self.labelPointsUsed.setGeometry(QtCore.QRect(550, 20, 41, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelPointsUsed.setFont(font)
        self.labelPointsUsed.setStyleSheet("color: #0d6ba6")
        self.labelPointsUsed.setObjectName("labelPointsUsed")
        
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(10, 160, 621, 401))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
    
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setGeometry(QtCore.QRect(10, 10, 261, 361))
        self.frame_4.setStyleSheet("border-color: rgb(120, 120, 120);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame_4)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 261, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.radioBat = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.radioBat.setFont(font)
        self.radioBat.toggled.connect(self.batters)
        self.radioBat.setObjectName("radioBat")
        self.horizontalLayout.addWidget(self.radioBat)
        
        self.radioBow = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.radioBow.setFont(font)
        self.radioBow.toggled.connect(self.bowlers)
        self.radioBow.setObjectName("radioBowl")
        self.horizontalLayout.addWidget(self.radioBow)
        
        self.radioAr = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.radioAr.setFont(font)
        self.radioAr.toggled.connect(self.allrounders)
        self.radioAr.setObjectName("radioAr")
        self.horizontalLayout.addWidget(self.radioAr)
        
        self.radioWk = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.radioWk.setFont(font)
        self.radioWk.toggled.connect(self.wicketkeepers)
        self.radioWk.setObjectName("radioWk")
        self.horizontalLayout.addWidget(self.radioWk)
        
        self.listAvailable = QtWidgets.QListWidget(self.frame_4)
        self.listAvailable.setGeometry(QtCore.QRect(0, 41, 261, 301))
        self.listAvailable.setStyleSheet("color : #0d6ba6")
        self.listAvailable.itemDoubleClicked.connect(self.add_used_points)
        
        self.listAvailable.setObjectName("listAvailable")

        self.label_14 = QtWidgets.QLabel(self.frame_3)
        self.label_14.setGeometry(QtCore.QRect(280, 12, 61, 361))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setGeometry(QtCore.QRect(350, 10, 261, 361))
        self.frame_5.setStyleSheet("")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.frame_5)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 261, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        self.label_16 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_2.addWidget(self.label_16)
        
        self.labelTeamName = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelTeamName.setFont(font)
        self.labelTeamName.setStyleSheet("color: #0d6ba6")
        self.labelTeamName.setObjectName("labelTeamName")
        self.horizontalLayout_2.addWidget(self.labelTeamName)
        
        self.listUsed = QtWidgets.QListWidget(self.frame_5)
        self.listUsed.setGeometry(QtCore.QRect(0, 40, 261, 301))
        self.listUsed.itemDoubleClicked.connect(self.add_available_points)
        self.listUsed.setStyleSheet("color:#0d6ba6")
        self.listUsed.setObjectName("listUsed")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.copyright = QtWidgets.QLabel(self.frame_3)
        self.copyright.setGeometry(QtCore.QRect(350, 360, 241, 16))
        self.copyright.setAutoFillBackground(True)
        self.copyright.setObjectName("copyright")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(270, 550, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(290, 550, 47, 13))
        self.label_4.setObjectName("label_4")
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 644, 21))
        self.menubar.setObjectName("menubar")
        
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionNEW_Team.triggered.connect(self.newTeam)
        
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionOPEN_Team.triggered.connect(self.openTeam)
        
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionSAVE_Team.triggered.connect(self.save_team)
        
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.actionEVALUATE_Team.triggered.connect(self.evaluateTeam)
        
        self.actionhel = QtWidgets.QAction(MainWindow)
        self.actionhel.setObjectName("actionhel")
        
        self.actionDELETE_Team = QtWidgets.QAction(MainWindow)
        self.actionDELETE_Team.setObjectName("actionDELETE_Team")
        self.actionDELETE_Team.triggered.connect(self.del_team)
        
        self.actionQUIT_2 = QtWidgets.QAction(MainWindow)
        self.actionQUIT_2.setObjectName("actionQUIT_2")
        self.actionQUIT_2.triggered.connect(self.quit)
        
        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionDELETE_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionQUIT_2)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.radioBat.setEnabled(0)
        self.radioAr.setEnabled(0)
        self.radioBow.setEnabled(0)
        self.radioWk.setEnabled(0)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Your Selection"))
        self.label_2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.labelBat.setText(_translate("MainWindow", "##"))
        self.labelBow.setText(_translate("MainWindow", "##"))
        self.label_5.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.labelAr.setText(_translate("MainWindow", "##"))
        self.label_7.setText(_translate("MainWindow", "All-Rounders(AR)"))
        self.labelWk.setText(_translate("MainWindow", "##"))
        self.label_9.setText(_translate("MainWindow", "Wicket-Keeper(WK)"))
        self.labelPointsAvailable.setText(_translate("MainWindow", "###"))
        self.label_11.setText(_translate("MainWindow", "Points Available"))
        self.label_12.setText(_translate("MainWindow", "Points Used"))
        self.labelPointsUsed.setText(_translate("MainWindow", "###"))
        self.radioBat.setText(_translate("MainWindow", "BAT"))
        self.radioBow.setText(_translate("MainWindow", "BOWL"))
        self.radioAr.setText(_translate("MainWindow", "AR"))
        self.radioWk.setText(_translate("MainWindow", "WK"))
        self.label_14.setText(_translate("MainWindow", "    >"))
        self.label_16.setText(_translate("MainWindow", "Team Name"))
        self.labelTeamName.setText(_translate("MainWindow", "Display Here"))
        self.copyright.setText(_translate("MainWindow", "             Copyright © faisalmirza215@gmail.com"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "TextLabel"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionDELETE_Team.setText(_translate("MainWindow", "DELETE Team"))
        self.actionQUIT_2.setText(_translate("MainWindow", "QUIT"))
        self.actionhel.setText(_translate("MainWindow", "hel"))
        
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
